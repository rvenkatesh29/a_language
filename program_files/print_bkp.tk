#!/usr/bin/tclsh

set ipfile ""
set line_no 0
set opfile ""
set int_var [list ]
set char_var [list ]
set flower_brace [list ]
set fuction_list [list ]
set fuction_name [list ]
# Open the files
proc open_compilation_file {file_name} {
	global ipfile line_no opfile
       regsub {/my_files/(.*)} $file_name {/program_files/output.a} source_file_name	
set opfile [open $source_file_name  w]
puts $opfile "#!/usr/bin/tclsh"
set ipfile [open $file_name r]
set int_var [list ]
set char_var [list ]
set line_no 0
set function_list [list ]
puts $opfile "
proc sub_numbers_to_arabic \{rhs\} \{
   regsub -all \{१\} \$rhs \{1\} rhs
   regsub -all \{२\} \$rhs \{2\} rhs
   regsub -all \{३\} \$rhs \{3\} rhs
   regsub -all \{४\} \$rhs \{4\} rhs
   regsub -all \{५\} \$rhs \{5\} rhs
   regsub -all \{६\} \$rhs \{6\} rhs
   regsub -all \{७\} \$rhs \{7\} rhs
   regsub -all \{८\} \$rhs \{8\} rhs
   regsub -all \{९\} \$rhs \{9\} rhs
   regsub -all \{०\} \$rhs \{0\} rhs
   return \$rhs
\}
proc sub_numbers_to_devanagari \{rhs\} \{
   regsub -all \{1\} \$rhs \{१\} rhs
   regsub -all \{2\} \$rhs \{२\} rhs
   regsub -all \{3\} \$rhs \{३\} rhs
   regsub -all \{4\} \$rhs \{४\} rhs
   regsub -all \{5\} \$rhs \{५\} rhs
   regsub -all \{6\} \$rhs \{६\} rhs
   regsub -all \{7\} \$rhs \{७\} rhs
   regsub -all \{8\} \$rhs \{८\} rhs
   regsub -all \{9\} \$rhs \{९\} rhs
   regsub -all \{0\} \$rhs \{०\} rhs
   return \$rhs
\}

global res_win
set res_win \[grid \[text .res_win1\]\]
#Proc to get irrespective value from stdin
proc stdin \{\} \{
	set var \"\"
	set current1 \"\"
        .res_win1 mark set limit insert
        .res_win1 mark gravity limit left
        .res_win1 configure -state normal
	focus .res_win1
	bind .res_win1 <Return> \{
		set var 1
	\}
	bind .res_win1 <BackSpace> \{
		if \{\[%W compare insert > limit\]\} \{
			%W delete insert-1c
			%W see insert
		\}
		break
	\}
	bind .res_win1 <Key> \{
		if \{\[%W compare insert < limit\]\} \{
			%W mark set insert end
		\}
	\}
	tkwait variable var
        .res_win1 configure -state disabled
\}

"
# Quotes end here
}

# Proc to substitute devanagari numbers with arabic numerals
proc sub_numbers {rhs} {
   regsub -all {१} $rhs {1} rhs
   regsub -all {२} $rhs {2} rhs
   regsub -all {३} $rhs {3} rhs
   regsub -all {४} $rhs {4} rhs
   regsub -all {५} $rhs {5} rhs
   regsub -all {६} $rhs {6} rhs
   regsub -all {७} $rhs {7} rhs
   regsub -all {८} $rhs {8} rhs
   regsub -all {९} $rhs {9} rhs
   regsub -all {०} $rhs {0} rhs
   return $rhs
}

# Proc to substitute arabic numbers with devanagari numbers
proc sub_numbers1 {rhs} {
   regsub -all {1} $rhs {१} rhs
   regsub -all {2} $rhs {२} rhs
   regsub -all {3} $rhs {३} rhs
   regsub -all {4} $rhs {४} rhs
   regsub -all {5} $rhs {५} rhs
   regsub -all {6} $rhs {६} rhs
   regsub -all {7} $rhs {७} rhs
   regsub -all {8} $rhs {८} rhs
   regsub -all {9} $rhs {९} rhs
   regsub -all {0} $rhs {०} rhs
   return $rhs
}

# Proc to get string from stdin
proc get_value_from_stdin {line} {
   global opfile int_var char_var line_no
   set line_no1 [sub_numbers1 $line_no]
   if {[regexp {^\s*नक्ष\s+(.*)\s*$} $line args var] == 1} {
      if {$var == ""} {
         # Error: empty arguments
         puts "$line_no1:??{}??"
         error "Empty arguments"
      } elseif {[lsearch -all -exact $int_var $var] != ""} {
         puts $opfile "stdin"
         puts $opfile "set $var \[.res_win1 get limit end\]"
         puts $opfile "regsub -all \{\\n\} \${$var} \{\} $var"
         puts $opfile "if \{\[regexp \{\[०१२३४५६७८९0123456789\]+\} \${$var} \] == 0\} \{"
         puts $opfile "   set $var 0"
         puts $opfile "\} else {"
         puts $opfile "   set $var \[sub_numbers_to_arabic \${$var}\]"
         puts $opfile "}"  
      } elseif {[lsearch -all -exact $char_var $var] != ""} {
         puts $opfile "stdin"
         puts $opfile "set $var \[.res_win1 get limit end\]"
         puts $opfile "regsub -all \{\\n\} \${$var} \{\} $var"
      } else { 
         # Error: Unknown variable
         puts "$line_no1:??$var??"
         error "Unknown variable"
      }
   } else {
      #Error : Wrong syntax
      puts "!X+-"
      error "Wrong syntax"
   }
}


# Proc for print command
proc print {line} {
   global opfile int_var char_var line_no
   set line_no1 [sub_numbers1 $line_no]
   if {[regexp {^\s*लिख\s+(.*)$} $line args a] == 1} {
      set b [split $a ""]
      set previous_char ""
      set previous_print 0
      for {set i 0} {$i < [string length $a]} {incr i} {
         if {[regexp {\"} [lindex $b $i]] == 1} {
            if {$previous_print == 1} {
               # Error: Missing space
               puts "$line_no1:?? ??"
               error "Missing space"
            }
            incr i
            set word "{"
            while { [regexp {\"} [lindex $b $i]] == 0} {
               if {[regexp {\\} [lindex $b $i]] == 1} {
                  incr i
               }
               set word "$word[lindex $b $i]"
               incr i
               if {$i == [string length $a]} {
                  # Error: Missing Quotes
                  puts "$line_no1:??\"??" 
                  error "Missing quotes"
               }
            }
            #puts $opfile "puts -nonewline $word"
	    puts $opfile ".res_win1 configure -state normal"
	    puts $opfile ".res_win1 insert end $word}"
	    puts $opfile ".res_win1 configure -state disabled"
            set previous_print 1
         } elseif {[regexp {\s} [lindex $b $i]] == 1} {
            set previous_print 0
         } elseif {[regexp {\\} [lindex $b $i]] == 1} {
            # Error: Unknown slash
            puts "$line_no1:??\\??"
	    tk_messageBox -icon error -title "Compilation Error" -type ok -message "$line_no1:??\\??"
            error "Unknown slash"
         } else {
            set var ""
            set closed 0
            while { [regexp {[\s\n]} [lindex $b $i]] != 1} {
               set var "$var[lindex $b $i]"
               if {$i == [expr [string length $a]-1]} {
                  break;
               } elseif { $i > [string length $a] } {
                  # Error: Internal Error
                  error "Error"
               }
               incr i
               if {$i == [string length $a]} {
                  set var "$var[lindex $b $i]"
                  break
               }
            }
            if {[lsearch -exact $int_var $var] != -1} {
               set var1 [sub_numbers1 $var]
	       puts $opfile ".res_win1 configure -state normal"
	       puts $opfile ".res_win1 insert end \${$var1}"
	       puts $opfile ".res_win1 configure -state disabled"
               #puts $opfile "puts -nonewline \"\[sub_numbers_to_devanagari \${$var}\]\""
            } elseif {[lsearch -exact $char_var $var] != -1} {
	       puts $opfile ".res_win1 configure -state normal"
	       puts $opfile ".res_win1 insert end \${$var}"
	       puts $opfile ".res_win1 configure -state disabled"
            } else { 
               # Error: Unknown variable
               puts "$line_no1:??$var??"
	       tk_messageBox -icon error -title "Compilation Error" -type ok -message "$line_no1:??$var??"
               #error "Unknown variable"
            }  
         }
      }
   }
#   puts $opfile "puts \"\""
}


# Proc for complex assign
proc complex_assign {a} {
   global opfile int_var char_var line_no
   set line_no1 [sub_numbers1 $line_no]
   tk_messageBox -icon error -title "Compilation Error" -type ok -message "$line_no1:??$a??"
   set b [split $a ""]
   set previous_number 0
   set previous_operator 0
   set operator 0
   set rhs ""
   for {set i 0} {$i < [string length $a]} {incr i} {
      if {[regexp {[\d\(\)]} [lindex $b $i]] == 1} {
         if {$previous_number == 1} {
            # Error: Missing operator
            puts "$line_no1:??@??"
            error "Missing operator"
         }
         set number ""
         while {[regexp {[\d\(\)]} [lindex $b $i]] == 1} {
             set number "$number[lindex $b $i]"
             incr i
             if {$i == [string length $a]} {
               break
            }
         }
         set i [expr $i-1]
         set previous_operator 0
         set rhs "$rhs$number"
      } elseif {[regexp {[\+\-\*%\/]} [lindex $b $i]] == 1} {
         if {$previous_operator == 1} {
            # Error: Additional operator
            puts "$line_no1:++@++"
            error "Additional operator"
         } else {
            set rhs "$rhs[lindex $b $i]"
         }
         set operator 1
         set previous_number 0
         set previous_operator 1
      } elseif {[regexp { } [lindex $b $i]] == 1} {
      } else {
         if {$previous_number == 1} {
            # Error: Missing operator
            puts "$line_no1:??@??"
            error "Missing operator"
         }
         set var ""
         while {[regexp {[\s\+\-\*\%\/]} [lindex $b $i]] == 0 } {
            set var "$var[lindex $b $i]"
            if {$i == [expr [string length $a]-1]} {
               break
            }   
            incr i
         }
         if {[lsearch -exact $int_var $var] == ""} {
               #Error: Variable not found
               puts $opfile "??$var??"
               error "Variable not found
         }
         set rhs "$rhs\${$var}"
         set i [expr $i-1]
         set previous_operator 0
         set previous_number 1
      }
   }
   if {$operator == 1} {
      set rhs "\[expr $rhs\]"
   }
   return $rhs
}

# Proc to assign the value to file
proc assign {line} {
   global opfile int_var char_var line_no
   set line_no1 [sub_numbers1 $line_no]
   if {[regexp {^\s*(.*)\s*=\s*(.*)\s*$} $line a lhs1 rhs1] == 1} {
      regsub -all {\s} $rhs1 {} rhs
      regsub -all {\s} $lhs1 {} lhs
      if {[lsearch -exact $int_var $lhs] == -1} {
      	    if {[lsearch -exact $char_var $lhs] == -1} {
               #Error: Variable not found
               puts "??$lhs??"
	       tk_messageBox -icon error -title "Compilation Error" -type ok -message "$line_no1:$lhs:??\\??"
               error "Variable not found"
            }
      }
      set rhs1 [sub_numbers $rhs]
	 tk_messageBox -icon error -title "Compilation Error" -type ok -message "$line_no1:$rhs1:??\\??"
	 puts "[regexp {[\+\-\*\/\%\(\)]} $rhs1] $rhs1" 
      if {[regexp {[\+\-\*\/\%\(\)]} $rhs1] == 1 } {
	 tk_messageBox -icon error -title "Compilation Error" -type ok -message "$line_no1:$rhs1:??\\??"
         set rhs1 [complex_assign $rhs1]
      } 
   } else {
      #Error:Wrong syntax
      puts "!x+-"
      error "Wrong syntax"
   }
   return "set $lhs $rhs1"
}
proc assign1 {line} {
        global int_var opfile
	set assign2 [assign $line]
	puts $opfile $assign2
}

# Declare integer
proc declare_int {line} {
   global int_var opfile
   if {[regexp {^\s*गण\s+(.*)$} $line a args] == 1} {
      set args1 [split $args ","]
      foreach i $args1 { 
         regsub -all {\s*} $i "" i
	 if {[lsearch $i $int_var] != -1} {
            #Error:Duplicate instantiation
	    puts "++$i"
	    error "Duplicate instantiation"
         }
         puts $opfile "set ${i} 0"
         lappend int_var $i
      }
   } else {
      #Error:Wrong syntax
      puts "!x+-"
      error "Wrong syntax"
   }
}

# Declare string
proc declare_char {line} {
   global char_var opfile
   if {[regexp {\s*सर\s*(.*)} $line a args] == 1} {
      set args1 [split $args ","]
      foreach i $args1 {
         regsub -all {\s*} $i "" i
	 if {[lsearch $i $char_var] != -1} {
            #Error:Duplicate instantiation
	    puts "++$i"
	    error "Duplicate instantiation"
         }
         puts $opfile "set ${i} \"\""
         lappend char_var $i
      }
   } else {
      #Error:Wrong syntax
      puts "!x+-"
      error "Wrong syntax"
   }
}

#If statement
proc if_statement {line} {
   global opfile int_var char_var line_no flower_brace
   set line_no1 [sub_numbers1 $line_no]
   if {[regexp {^\s*यदि\s*\{\s*(.*)\s*\}\s*\{\s*$} $line full a] == 1} {
      set expr_val [conditional_expr_eval $a]
      puts $opfile "if \{ $expr_val \} \{"
   } else {
      #Error:Syntax error
      puts "!X+-"
      error "Syntax error"
   }
   lappend flower_brace $line_no
}

# Proc to evaluate conditional expression
proc conditional_expr_eval {a} {
   global opfile int_var char_var line_no
   set line_no1 [sub_numbers1 $line_no]
   if {$a == ""} {
      #Error:Empty args
      puts "$line_no1:??{}??"
      error "Empty args"
   }
   set b1 [sub_numbers $a]
   set b [split $b1 ""]
   set rel_op 0
   for {set i 0} {$i < [string length $a]} {incr i} {
      if {[regexp {[<>=!]} [lindex $b $i]] == 0} {
         set cond_expr ""
         while {[regexp {[<>=!]} [lindex $b $i]] == 0} {
            set cond_expr "$cond_expr[lindex $b $i]"
            incr i
            if {$i >= [string length $a]} {
               if {$rel_op == 0} {
                  #Error: Missing relational operator
                  puts "$line_no1:??==??"
                  error "Missing relational operator"
               } else {
                  break;
               }
            }
         }
         set i [expr $i-1]
         if {$rel_op == 0} {
            set lhs $cond_expr
         } else {
            set rhs $cond_expr
         }
      } else {
         if {$rel_op == 0} {
            set op ""
            set op "[lindex $b $i]"
            incr i
            if {[regexp {[<>=!]} [lindex $b $i]] == 1} {
               set op "$op[lindex $b $i]"
               set rel_op 1
            } else {
               if {$op ==  "="} {
                  #Error:Wrong syntax
                  puts "!x+-"
                  error "Wrong syntax"
               }
               set rel_op 1
               set i [expr $i-1]
            }
         } else {
            #Error:Wrong syntax
            puts "!x+-"
            error "Wrong syntax"
         }
      }
   }
   if {$rhs == ""} {
      #Error:Wrong syntax
      puts "$line_no1:!X+-"
      error "Wrong syntax"
   }
   if {[regexp {\+\-\*\/\%} $lhs] == 1} {
      set lhs [complex_assign $lhs]
   } elseif {[regexp {\d+} $lhs] == 1} {
   } else {
      regsub -all { } $lhs {} lhs
      if {[lsearch -exact $int_var $lhs] == -1} {
                 #Error: Variable not found
                 puts "??$lhs??"
                 tk_messageBox -icon error -title "Compilation Error" -type ok -message "$line_no1:$lhs:??\\??"
                 error "Variable not found"
      } else {
	      set lhs \${$lhs}
      }
   }
   if {[regexp {\+\-\*\/\%} $rhs] == 1} {
      set rhs [complex_assign $rhs]
   } elseif {[regexp {\d+} $rhs] == 1} {
   } else {
      regsub -all { } $rhs {} rhs
      if {[lsearch -exact $int_var $rhs] == -1} {
                 #Error: Variable not found
                 puts "??$rhs??"
                 tk_messageBox -icon error -title "Compilation Error" -type ok -message "$line_no1:$rhs:??\\??"
                 error "Variable not found"
      } else {
	      set rhs \${$rhs}
      }
   }
   set expr_val "$lhs $op $rhs"
   return $expr_val
}

# proce for elseif
proc elseif_statement { line } {
   global opfile int_var char_var line_no flower_brace
   set line_no1 [sub_numbers1 $line_no]
   if {[regexp {^\s*\}\s*उत\s*\{\s*(.*)\s*\}\s*\{\s*$} $line full a] == 1} {
      set expr_val [conditional_expr_eval $a]
      puts $opfile "\} elseif \{ $expr_val \} \{"
   } else {
      #Error:Syntax error
      puts "!X+-"
      error "Syntax error"
   }
   lappend flower_brace $line_no
}

# proc for else
proc else_statement {line} {
   global opfile int_var char_var line_no flower_brace
   set line_no1 [sub_numbers1 $line_no]
   if {[regexp {^\s*\}\s*अथ\s*\{\s*$} $line full a] == 1} {
      puts $opfile "\} else \{"
   } else {
      #Error:Syntax error
      puts "!X+-"
      error "Syntax error"
   }
   lappend flower_brace $line_no
}

# proc for while
proc while_statement {line} { 
   global opfile int_var char_var line_no flower_brace
   set line_no1 [sub_numbers1 $line_no]
   if {[regexp {^\s*यर्हि\s*\{\s*(.*)\s*\}\s*\{\s*$} $line full a] == 1} {
      set expr_val [conditional_expr_eval $a]
      puts $opfile "while \{ $expr_val \} \{"
   } else {
      #Error:Syntax error
      puts "!X+-"
      error "Syntax error"
   }
      lappend flower_brace $line_no
}

# Next state expression
proc next_state_expr {line} {
   if {$line == ""} {
      return $line
   } elseif {[regexp {^\s*वृद्धि\s*} $line] == 1} {
      increment $line 
   } elseif {[regexp {^\s*क्षय\s*} $line] == 1} {
      decrement $line
   } else {
      #Error:Syntax error
      puts "!X+-"
      error "Syntax error"
   }
}
      
# proc for for statement
proc for_statement {line} {
   global opfile int_var char_var line_no flower_brace
   set line_no1 [sub_numbers1 $line_no]
   if {[regexp {^\s*अह\s+\{\s*(.*)\s*\}\s+\{\s*(.*)\s*\}\s+\{\s*(.*)\s*\}\s\{\s*$} $line full assign cond next_state] == 1} {
      if {$assign == ""} {
         set assign2 ""
	 puts  1
      } else {
         set assign2 [assign $assign]
      }
      set cond1 [conditional_expr_eval [sub_numbers $cond]]
      if {[regexp {^\s*वृद्धि\s+(.*)\s*$} $next_state] == 1} {
         set next1 [increment [sub_numbers $next_state]]
      } elseif {[regexp {^\s*क्षय\s+(.*)\s*$} $next_state] == 1} {
         set next1 [decrement [sub_numbers $next_state]]
      } elseif {$next_state == ""} {
         set next1 ""
      } else {
         #Error:Syntax error
         puts "$line_no1:!X+-"
         error "Syntax error"
      }
      puts $opfile "for \{$assign2\} \{$cond1\} \{$next1\} \{"
   } else {
      #Error:Syntax error
      puts "$line_no1:!X+-"
      error "Syntax error"
   }
   lappend flower_brace $line_no
      
}
# proc for else
proc flower_braces {line} {
   global opfile int_var char_var line_no flower_brace
   if {[llength $flower_brace] > 1} {
      puts $opfile "\}"
      set flower_brace [lreplace $flower_brace end end]
   } else {
      puts "?+\}"
      error "Extra brace"
   } 
}

# Increment proc
proc increment {line} {
   global opfile int_var char_var line_no
   set line_no1 [sub_numbers1 $line_no]
   if {[regexp {^\s*वृद्धि\s+(.*)\s*$} $line full var ] == 1} {
      set value [split $var " "]
      set var [lindex $value 0]
      set val [lindex $value 1]
      regsub -all {\s*} $var {} var
      regsub -all {\s*} $val {} val
      if {[lsearch -exact $int_var $var] != -1} {
         if {$val == ""} {
		 return "incr $var"
	 } elseif {[regexp {\d*} $val] == 1} {
		 return "incr $var $val"
	 } else {
                 #Error:Syntax error
                 puts "$line_no1:!X+-"
                 error "Syntax error"
	 }
      }
   }
}

# Decrement proc
proc decrement {line} {
   global opfile int_var char_var line_no
   set line_no1 [sub_numbers1 $line_no]
   if {[regexp {^\s*क्षय\s+(.*)\s*$} $line full var ] == 1} {
      set value [split $var " "]
      set var [lindex $value 0]
      set val [lindex $value 1]
      regsub -all {\s*} $var {} var
      regsub -all {\s*} $val {} val
      if {[lsearch -exact $int_var $var] != -1} {
         if {$val == ""} {
		 return "incr $var -1"
	 } elseif {[regexp {\d*} $val] == 1} {
		 return "incr $var -$val"
	 } else {
                 #Error:Syntax error
                 puts "$line_no1:!X+-"
                 error "Syntax error"
	 }
      }
   }
}

#For procedures
proc procedure {line} {
   global opfile int_var char_var line_no flower_brace function_name function_list
   set line_no1 [sub_numbers1 $line_no]
   if {[llength $flower_brace] > 1} {
      #Error:Missing braces
      puts "$line_no1:?-\}"
      error "Missing braces"
   }
   set int_var [list ]
   set char_var [list ]
   if {[regexp {^\s*कर\s+\{\s*(.*)\s*\}\s+(.*)\s+\{\s*(.*)\s*\}\s*\{\s*$} $line full ret_value name var] == 1} {
      regsub -all {\s} $name {} name
      regsub -all {\s} $ret_value {} ret_value
      if {[regexp {हीन} $ret_value] == 1} {
         set ret_value1 void
      } elseif {[regexp {सर} $ret_value] == 1} {
         set ret_value1 str
      } elseif {[regexp {गण} $ret_value] == 1} {
         set ret_value1 int
      } else {
         #Error: Invalid return value
	 puts "$line_no1:X->$name"
	 error "Invalid return value"
      }
      if {[regexp {^\s*गण\s*} $var] == 1} {
         declare_int $var
         set ret_value int
      } elseif {[regexp {\s*सर\s*} $var] == 1} {
         declare_char $var
	 set arg_type str
      } elseif {$var == "" } {
	 set arg_type void
      } else {
         #Error:Syntax error
         puts "$line_no1:!X+-\{\}"
         error "Syntax error in arg type"
      }
      puts $opfile "proc $name \{$var\} \{"
      lappend function_name $name
      lappend function_list {$name $arg_type $ret_value1}
      lappend flower_brace $line_no1
   } else {
      #Error:Syntax error
      puts "$line_no1:!X+-"
      error "Syntax error"
   }
}

proc function_call1 {line} {
   set fn_c [function_call $line]
   puts $opfile $fn_c
}
proc function_call {line} {
   global opfile int_var char_var line_no function_name function_list fn_list_index
   set line_no1 [sub_numbers1 $line_no]
   if  {[regexp {^\s*(.*)\s+(.*)\s*} $line full name args] == 1} {
      regsub {\s} $name {} name
      regsub {\s} $args {} args
   } elseif {[regexp {^\s*(.*)\s*} $line full name ] == 1} {
      regsub {\s} $name {} name
   }
   if {[lsearch $name $function_name] != -1 } {
      for {set i 0} {$i < [llength $function_list} {incr i} {
         if {[lsearch [lindex $function_list 0 ] $name] != -1} {
            set fn_list_index $i
	    break
         } else {
            error "Internal error"
         }
      }
   } else {
      error "Invalid fuction name"
   }
   set fn_ret_value [lindex [lindex $function_list $fn_list_index] 2]
   if {$args == ""} {
      set orig_ret_value void
   } elseif {[lsearch $args $int_var] != -1} {
      set orig_ret_value int
   } elseif {[lsearch $args $char_var] != -1} {
      set orig_ret_value str
   } else {
      #Error:Error in arg type
      puts "$line_no1:!X+-\{\}"
      error "Error in arg type"
   }
   if {$fn_ret_value neq $orig_ret_value} {
   
   } else {
      #Error:Syntax error
      puts "$line_no1:!X+-"
      error "Syntax error"
   }
}

##For list statements
#proc list_statement {line} {
#   global opfile int_var char_var line_no
#   set line_no1 [sub_numbers1 $line_no]
#   if {[regexp {^\s*सूचि\s+गण\s+(.*)\s*$} $line full var] == 1} {
#      regsub -all {\s} $var {} var
#      lappend int_list [split $var ","]
#   } elseif {[regexp {^\s*सूचि\s+सर\s+(.*)\s*$} $line full var] == 1} {
#      regsub -all {\s} $var {} var
#      lappend char_list [split $var ","]
#   } else {
#      #Error:Syntax error
#      puts "!X+-"
#      error "Syntax error"
#   }
#}
#
# Proc for return
proc return_statement {} {
   if {[regexp {^\s*लिख\s+(.*)} $line a args] == 1} {
      regsub -all {\s*} $args {} var
      if {[lsearch -exact $int_var $var] != -1} {
         set var1 [sub_numbers1 $var]
         puts $opfile "return \${var1}"
      } elseif {[lsearch -exact $char_var $var] != -1} {
         puts $opfile "return \${var}"
      } else {
         puts $opfile ""
      }
   }
}
      
# First proc, to regexp the command
proc regexp_dev {line} {
   global opfile int_var char_var line_no fuction_list
   if {[regexp {^\s*लिख\s+(.*)} $line a args] == 1} {
      print $line
   } elseif {[regexp {^\s*यदि\s*} $line] == 1} {
      if_statement $line
   } elseif {[regexp {^\s*\}\s*उत\s*} $line] == 1} {
      elseif_statement $line
   } elseif {[regexp {^\s*\}\s*अथ\s*} $line] == 1} {
      else_statement $line
   } elseif {[regexp {^\s*यर्हि\s*} $line] == 1} {
      while_statement $line
   } elseif {[regexp {^\s*अह\s*} $line] == 1} {
      for_statement $line
   } elseif {[regexp {=} $line] == 1} {
      assign1 $line
   } elseif {[regexp {\s*सूचि\s*} $line] == 1} {
      list_statement $line
   } elseif {[regexp {^\s*गण\s*} $line] == 1} {
      declare_int $line
   } elseif {[regexp {\s*सर\s*} $line] == 1} {
      declare_char $line
   } elseif {[regexp {^\s*\}\s*$} $line] == 1} {
      flower_braces $line
   } elseif {[regexp {^\s*नक्ष\s*} $line] == 1} {
      get_value_from_stdin $line
   } elseif {[regexp {^\s*वृद्धि\s*} $line] == 1} {
      puts $opfile "[increment $line]" 
   } elseif {[regexp {^\s*क्षय\s*} $line] == 1} {
      puts $opfile "[decrement $line]" 
   } elseif {[regexp {^\s*कर\s*} $line] == 1} {
      procedure $line
   } elseif {[lsearch $line $fun] == 0} {
      function_call $line
   } else {
      error "Unknown command"
   }
}

# Main program
proc main {file_name} {
   global ipfile line_no opfile flower_brace function_name int_var char_var
   set int_var ""
   set char_var ""
   set flower_brace {0}
   open_compilation_file $file_name
   while {[gets $ipfile line] >= 0} {
      incr line_no
      if {[regexp {;$} $line] == 1} {
         set line1 [split $line ";"]
         foreach line2 $line1 {
            regexp_dev $line2;   
         }
      } else {
          regexp_dev $line
      }
   }
   close $opfile
   close $ipfile
   if {[llength $flower_brace] > 1} {
      error "Missing braces"
   }
}
